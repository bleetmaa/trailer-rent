version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: trailer-rent-postgres
    environment:
      POSTGRES_DB: trailerrent
      POSTGRES_USER: trailerrent
      POSTGRES_PASSWORD: trailerrent123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - trailer-rent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trailerrent"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      target: development
    container_name: trailer-rent-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=trailerrent;Username=trailerrent;Password=trailerrent123
      - JWT__Key=your-super-secret-jwt-key-that-is-at-least-256-bits-long-for-security
      - JWT__Issuer=TrailerRent
      - JWT__Audience=TrailerRentUsers
    ports:
      - "7001:443"
      - "5001:80"
    volumes:
      - ~/.aspnet/https:/https:ro
      - ./src/backend:/app/src
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - trailer-rent-network
    restart: unless-stopped

  frontend:
    build:
      context: ./src/frontend/trailer-rent-app
      dockerfile: Dockerfile
      target: development
    container_name: trailer-rent-frontend
    environment:
      - NODE_ENV=development
    ports:
      - "4200:4200"
    volumes:
      - ./src/frontend/trailer-rent-app:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - trailer-rent-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  trailer-rent-network:
    driver: bridge
